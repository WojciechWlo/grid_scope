version: '3.9'

services:
  backend:
    build:
      context: ./grid_scope_backend
    volumes:
      - ./grid_scope_backend:/app
    ports:
      - "${BACKEND_PORT}:8000"
    environment:
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
      - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - SITE_URL=${SITE_URL}
      - INFISICAL_CLIENT_TOKEN=${INFISICAL_CLIENT_TOKEN}
    networks:
      - infisical_backend
      - backend_frontend
      - mssql_backend
      
  frontend:
    build:
      context: ./grid_scope_frontend
    volumes:
      - ./grid_scope_frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
    networks:
      - backend_frontend

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    environment:
      - ACCEPT_EULA=${ACCEPT_EULA}
      - SA_PASSWORD=${DB_PASSWORD}
      - MSSQL_PID=${MSSQL_PID}
    ports:
      - "${DB_PORT}:1433"
    volumes:
      - mssql_data:/var/opt/mssql
      - ./initdb.sql:/initdb.sql
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost", "-U", "${DB_USER}", "-P", "${DB_PASSWORD}", "-N", "-C", "-Q", "SELECT 1"]
      interval: 10s
      retries: 10
    networks:
      - mssql
      - mssql_backend

  mssql-init:
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      mssql:
        condition: service_healthy
    volumes:
      - ./initdb.sql:/initdb.sql
    entrypoint: >
      /bin/bash -c "
      /opt/mssql-tools18/bin/sqlcmd -S mssql -U ${DB_USER} -P ${DB_PASSWORD} -N -C -i /initdb.sql
      "
    networks:
      - mssql

  infisical:
    container_name: infisical-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    image: infisical/infisical:latest-postgres
    pull_policy: always
    env_file: .env
    ports:
      - 80:8080
    environment:
      - NODE_ENV=production
    networks:
      - infisical

  redis:
    image: redis
    container_name: infisical-dev-redis
    env_file: .env
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379
    networks:
      - infisical
    volumes:
      - redis_data:/data

  db:
    container_name: infisical-db
    image: postgres:14-alpine
    restart: always
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - infisical
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10


volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  mssql_data:

networks:
  infisical:
  mssql_backend:
  backend_frontend:
  infisical_backend:
  mssql: